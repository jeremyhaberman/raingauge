package com.jeremyhaberman.raingauge.rest;import android.test.suitebuilder.annotation.SmallTest;import junit.framework.TestCase;import java.net.URI;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;public class RequestTest extends TestCase {	private static final URI TEST_URI = URI.create("http://test.com");	private static final String HEADER_1_KEY = "key1";	private static final Map<String, List<String>> HEADER_1 =			buildHeader(HEADER_1_KEY, "value1a");	private static final String HEADER_2_KEY = "key2";	private static final Map<String, List<String>> HEADER_2 =			buildHeader(HEADER_2_KEY, "value2a", "value2b");	private static final byte[] TEST_BODY = "test body".getBytes();	@SmallTest	public void testRequestWithMethodAndURI() {		Request request = new Request(Method.GET, TEST_URI, null, null);		assertNotNull(request);		assertEquals(request.getMethod(), Method.GET);		assertEquals(request.getRequestUri(), TEST_URI);		assertNull(request.getHeaders());		assertNull(request.getBody());	}	@SmallTest	public void testRequestWithAllParams() {		Request request = new Request(Method.GET, TEST_URI, HEADER_1, TEST_BODY);		assertNotNull(request);		assertEquals(request.getMethod(), Method.GET);		assertEquals(request.getRequestUri(), TEST_URI);		assertHeadersMatch(HEADER_1, request.getHeaders());		assertEquals(TEST_BODY, request.getBody());	}	@SmallTest	public void testSetBody() {		Request request = new Request(Method.POST, URI.create("http://www.google.com"), null, null);		byte[] expectedBody = "body".getBytes();		request.setBody(expectedBody);		byte[] actualBody = request.getBody();		assertEquals(expectedBody, actualBody);	}	@SmallTest	public void testAddHeaderWhenHeadersAreNull() {		Request request = new Request(Method.POST, URI.create("http://www.google.com"), null, null);		request.addHeader(HEADER_1_KEY, HEADER_1.get(HEADER_1_KEY));		assertHeadersMatch(HEADER_1, request.getHeaders());	}	@SmallTest	public void testAddHeaderWhenHeadersExist() {		Request request = new Request(Method.POST, URI.create("http://www.google.com"), HEADER_1, null);		request.addHeader(HEADER_2_KEY, HEADER_2.get(HEADER_2_KEY));		Map<String, List<String>> expectedHeaders = new HashMap<String, List<String>>();		expectedHeaders.putAll(HEADER_1);		expectedHeaders.putAll(HEADER_2);		assertHeadersMatch(expectedHeaders, request.getHeaders());	}	private static Map<String, List<String>> buildHeader(String key, String... values) {		Map<String, List<String>> header = new HashMap<String, List<String>>();		List<String> valueList = new ArrayList<String>();		for (String val : values) {			valueList.add(val);		}		header.put(key, valueList);		return header;	}	private void assertHeadersMatch(Map<String, List<String>> header1,									Map<String, List<String>> header2) {		// same size		assertEquals(header1.size(), header2.size());		// same keys		Set<String> keys1 = header1.keySet();		Set<String> keys2 = header2.keySet();		String[] keys1Sorted = keys1.toArray(new String[0]);		String[] keys2Sorted = keys2.toArray(new String[0]);		assertArraysContainSameValues(keys1Sorted, keys2Sorted);		// same key values		Iterator<String> keyIterator = keys1.iterator();		String key = null;		while (keyIterator.hasNext()) {			key = keyIterator.next();			List<String> header1Value = header1.get(key);			List<String> header2Value = header2.get(key);			assertHeaderValuesMatch(header1Value, header2Value);		}	}	private void assertHeaderValuesMatch(List<String> value1, List<String> value2) {		// assert same size		assertTrue(value1.size() == value2.size());		// assert same values		String[] value1Array = value1.toArray(new String[0]);		String[] value2Array = value2.toArray(new String[0]);		assertArraysContainSameValues(value1Array, value2Array);	}	private void assertArraysContainSameValues(String[] array1, String[] array2) {		Arrays.sort(array1);		Arrays.sort(array2);		for (int i = 0; i < array1.length; i++) {			assertEquals(array1[i], array2[i]);		}	}}