package com.jeremyhaberman.raingauge.activity.test;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.preference.PreferenceManager;import android.test.ActivityUnitTestCase;import android.test.RenamingDelegatingContext;import android.test.ViewAsserts;import android.view.View;import android.widget.EditText;import android.widget.TextView;import com.jeremyhaberman.raingauge.R;import com.jeremyhaberman.raingauge.activity.RainGaugeActivity;import com.jeremyhaberman.raingauge.rest.resource.Observations;public class RainGaugeActivityTest extends ActivityUnitTestCase<RainGaugeActivity> {	private static final int ZIP = 55417;	public RainGaugeActivityTest() {		super(RainGaugeActivity.class);	}	public RainGaugeActivityTest(Class<RainGaugeActivity> activityClass) {		super(activityClass);	}	@Override	protected void setUp() throws Exception {		super.setUp();		Context context = new MyMockContext(getInstrumentation().getTargetContext());		setActivityContext(context);		setZip(context, ZIP);	}	private void setZip(Context context, int zip) {		SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);		preferences.edit().putInt(Observations.ZIP_CODE, zip).commit();	}	public void testPreconditions() throws InterruptedException {		RainGaugeActivity activity = startActivity(new Intent(Intent.ACTION_MAIN), null, null);		View root = activity.findViewById(R.id.main);		TextView rainfallText = (TextView) activity.findViewById(R.id.rainfall);		TextView wateringText = (TextView) activity.findViewById(R.id.watering);		TextView balanceText = (TextView) activity.findViewById(R.id.balance);		EditText manualWateringAmountEditText =				(EditText) activity.findViewById(R.id.watering_amount);		TextView forecastText = (TextView) activity.findViewById(R.id.forecast);		assertNotNull(activity);		assertNotNull(rainfallText);		assertNotNull(wateringText);		assertNotNull(balanceText);		assertNotNull(manualWateringAmountEditText);		assertNotNull(forecastText);		ViewAsserts.assertOnScreen(root, rainfallText);		ViewAsserts.assertOnScreen(root, wateringText);		ViewAsserts.assertOnScreen(root, balanceText);		ViewAsserts.assertOnScreen(root, manualWateringAmountEditText);		ViewAsserts.assertOnScreen(root, forecastText);		getInstrumentation().callActivityOnStart(activity);		getInstrumentation().callActivityOnResume(activity);		getInstrumentation().waitForIdleSync();	}	private static class MyMockContext extends RenamingDelegatingContext {		private static final String FILE_PREFIX = "test.";		private Context mContext;		public MyMockContext(Context context) {			super(context, FILE_PREFIX);			mContext = context;		}		@Override		public SharedPreferences getSharedPreferences(String name, int mode) {			return mContext.getSharedPreferences(FILE_PREFIX + name, mode);		}	}}