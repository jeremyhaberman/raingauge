package com.jeremyhaberman.raingauge.activity.test;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.preference.PreferenceManager;import android.test.ActivityUnitTestCase;import android.test.ViewAsserts;import android.view.View;import android.widget.EditText;import android.widget.TextView;import com.jeremyhaberman.raingauge.R;import com.jeremyhaberman.raingauge.activity.RainGaugeActivity;import com.jeremyhaberman.raingauge.provider.RainGaugeProviderContract;import com.jeremyhaberman.raingauge.rest.resource.Observations;import com.jeremyhaberman.raingauge.util.TestUtil;import java.util.Calendar;import java.util.GregorianCalendar;/** * adb shell am instrument -w -e class com.jeremyhaberman.raingauge.activity.test.RainGaugeActivityTest com.jeremyhaberman.raingauge.tests/android.test.InstrumentationTestRunner */public class RainGaugeActivityTest extends ActivityUnitTestCase<RainGaugeActivity> {	private static final int ZIP = 55417;	private Context mContext;	public RainGaugeActivityTest() {		super(RainGaugeActivity.class);	}	public RainGaugeActivityTest(Class<RainGaugeActivity> activityClass) {		super(activityClass);	}	@Override	protected void setUp() throws Exception {		super.setUp();		mContext = getInstrumentation().getTargetContext();		TestUtil.clearContentProvider(mContext);		setZip(ZIP);	}	@Override	protected void tearDown() throws Exception {		TestUtil.clearContentProvider(mContext);		super.tearDown();	}	private void setZip(int zip) {		SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);		preferences.edit().putInt(Observations.ZIP_CODE, zip).commit();	}	public void testPreconditions() throws InterruptedException {		RainGaugeActivity activity = startActivity(new Intent(Intent.ACTION_MAIN), null, null);		View root = activity.findViewById(R.id.main);		TextView rainfallLabel = (TextView) activity.findViewById(R.id.rainfall_label);		TextView rainfallText = (TextView) activity.findViewById(R.id.rainfall);		TextView wateringText = (TextView) activity.findViewById(R.id.watering);		TextView balanceText = (TextView) activity.findViewById(R.id.balance);		EditText manualWateringAmountEditText =				(EditText) activity.findViewById(R.id.watering_amount);		TextView forecastText = (TextView) activity.findViewById(R.id.forecast);		assertNotNull(activity);		assertNotNull(rainfallText);		assertNotNull(wateringText);		assertNotNull(balanceText);		assertNotNull(manualWateringAmountEditText);		assertNotNull(forecastText);		ViewAsserts.assertOnScreen(root, rainfallText);		ViewAsserts.assertOnScreen(root, wateringText);		ViewAsserts.assertOnScreen(root, balanceText);		ViewAsserts.assertOnScreen(root, manualWateringAmountEditText);		ViewAsserts.assertOnScreen(root, forecastText);		getInstrumentation().callActivityOnStart(activity);		getInstrumentation().callActivityOnResume(activity);		getInstrumentation().waitForIdleSync();	}	public void testShouldDisplayLastSevenDaysRainfall() {		double[] rainfall = new double[]{1.0, 2.5, 0.3};		double total = getTotalRainfall(rainfall);		addRainfall(rainfall);		RainGaugeActivity activity = launchActivity();		TextView rainfallText = (TextView) activity.findViewById(R.id.rainfall);		assertEquals(String.format("%.2f in", total), rainfallText.getText().toString());	}	private double getTotalRainfall(double[] rainfall) {		double total = 0.0;		for (double amount : rainfall) {			total += amount;		}		return total;	}	private RainGaugeActivity launchActivity() {		RainGaugeActivity activity = startActivity(new Intent(Intent.ACTION_MAIN), null, null);		getInstrumentation().callActivityOnStart(activity);		getInstrumentation().callActivityOnResume(activity);		getInstrumentation().waitForIdleSync();		return activity;	}	private void addRainfall(double[] amounts) {		Calendar cal;		Observations observations;		Uri uri;		int dayOffset = 0;		for (double amount : amounts) {			cal = new GregorianCalendar();			cal.set(Calendar.DATE, cal.get(Calendar.DATE) - dayOffset);			observations = Observations.createObservations(cal.getTimeInMillis(), amount);			uri = mContext.getContentResolver()					.insert(RainGaugeProviderContract.ObservationsTable.CONTENT_URI,							observations.toContentValues());			assertNotNull(uri);		}	}}